{"mappings":";;;;;;;;;;;;;;;;;AEAA,KAAK,CAAC,4BAAM,GAAG,CAAC;IACZ,OAAO,EAAE,CAA0B;AACvC,CAAC;IACD,wCAAsB,GAAP,4BAAM;;;ADDrB,KAAK,CAAC,CAAC,UAAC,6BAAO,EAAC,CAAC,GAAG,wCAAM;AAC1B,KAAK,CAAC,+BAAS,GAAG,oCAAK,CAAC,MAAM,CAAC,CAAC;aAC5B,6BAAO;IACP,YAAY,EAAE,CAAM;IACpB,cAAc,GAAG,MAAM,GAAK,MAAM,KAAK,GAAG;AAC9C,CAAC;IACD,wCAAyB,GAAV,+BAAS;;;SDNf,4BAAM,CAAC,aAAa,EAAE,CAAC;IAC5B,KAAK,CAAC,MAAM,IAAI,OAAO,EAAE,KAAK,GAAK,CAAC;QAChC,EAAuC,AAAvC,qCAAuC;QACvC,KAAK,CAAC,gBAAgB,GAAG,OAAO,CAAC,OAAO,SAAS,CAAM;QACvD,KAAK,CAAC,KAAK,GAAG,CAAW,aAAG,gBAAgB;QAC5C,KAAK,CAAC,GAAG,GAAG,CAAS,WAAG,KAAK;QAC7B,KAAK,CAAC,MAAM,GAAG,CAAU,YAAG,aAAa;QACzC,MAAM,CAAC,YAAY,CAAC,CAAQ,UAAG,KAAK,GAAG,GAAG,GAAG,MAAM;IACvD,CAAC;IACD,KAAK,CAAC,iBAAiB,IAAI,OAAO,GAAK,CAAC;QACpC,EAAuC,AAAvC,qCAAuC;QACvC,KAAK,CAAC,KAAK,GAAG,CAAW,aAAG,OAAO;QACnC,KAAK,CAAC,MAAM,GAAG,CAAU,YAAG,aAAa;QACzC,MAAM,CAAC,YAAY,CAAC,CAAmB,qBAAG,KAAK,GAAG,MAAM;IAC5D,CAAC;IACD,KAAK,CAAC,YAAY,UAAU,IAAI,GAAK,CAAC;QAClC,GAAG,CAAC,CAAC;YACD,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,wCAAS,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;gBACnC,cAAc,EAAE,QAAQ,CAAE,MAAM,EAAE,CAAC;oBAC/B,MAAM,CAAC,MAAM,IAAI,GAAG,IAAI,MAAM,GAAG,GAAG;gBACxC,CAAC;YACL,CAAC;YACD,MAAM,CAAC,GAAG,CAAC,IAAI;QACnB,CAAC,CACD,KAAK,EAAE,KAAK,EAAE,CAAC;YACX,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO;QAC7B,CAAC;IACL,CAAC;IACD,MAAM,CAAC,CAAC;2BACJ,iBAAiB;gBACjB,MAAM;IACV,CAAC;AACL,CAAC;AACM,KAAK,CAAC,yCAAS,IAAI,MAAM,GAAK,CAAC;IAClC,MAAM,CAAC,4BAAM,CAAC,MAAM;AACxB,CAAC;IACD,wCAAsB,GAAP,4BAAM","sources":["src/index.ts","src/requester.ts","src/config.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport requester from './requester';\n\ninterface IGather {\n  getMap(spaceId: string, mapId: string): Promise<any>;\n  getEmailGuestlist(spaceId: string): Promise<any>;\n}\n\nfunction Gather(initialApiKey: string): IGather {\n  const getMap = (spaceId: string, mapId: string) => {\n    // TODO: Catch nullish value for params\n    const formattedSpaceID = spaceId.replace(/\\//gi, '\\\\\\\\');\n    const space = '?spaceId=' + formattedSpaceID;\n    const map = '&mapId=' + mapId;\n    const apiKey = '&apiKey=' + initialApiKey;\n    return _sendRequest('getMap' + space + map + apiKey);\n  };\n\n  const getEmailGuestlist = (spaceId: string) => {\n    // TODO: Catch nullish value for params\n    const space = '?spaceId=' + spaceId;\n    const apiKey = '&apiKey=' + initialApiKey;\n    return _sendRequest('getEmailGuestlist' + space + apiKey);\n  };\n\n  const _sendRequest = async (path: string) => {\n    try {\n      const res = await requester.get(path, {\n        validateStatus: function (status) {\n          return status >= 200 && status < 300;\n        }\n      });\n      return res.data;\n    } catch (error: any) {\n      console.log(error.message);\n    }\n  };\n\n  return {\n    getEmailGuestlist,\n    getMap\n  };\n}\n\nexport const useGather = (apiKey: string) => {\n  return Gather(apiKey);\n};\n\nexport default Gather;\n","import axios from 'axios';\nimport config from './config';\nconst { baseURL } = config;\n\nconst requester = axios.create({\n  baseURL,\n  responseType: 'json',\n  validateStatus: (status) => status === 200\n});\n\nexport default requester;\n","const config = {\n  baseURL: 'https://gather.town/api/'\n};\n\nexport default config;\n"],"names":[],"version":3,"file":"gather.js.map"}